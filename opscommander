#!/usr/bin/env ruby

require 'rubygems'
require 'commander/import'

require './lib/aws/opsworks.rb'
require './lib/commands/bootstrap.rb'
require './lib/commands/bluegreen.rb'
require './lib/commands/delete.rb'

require './lib/vagrant/vagrant.rb'

require './lib/utils.rb'

program :version, '0.0.1'
program :description, 'Manages bootstrapping, configuration and deployment of OpsWorks stacks'
global_option '--yes'
global_option '--verbose'

command :bootstrap do |c|
  c.syntax = 'opscommander bootstrap [options]'
  c.description = 'Bootstraps a stack from config. Existing Instances/Layers can be deleted.'
  c.option '--environment [name]', String, 'environment name (alpha, beta, live, ...). Default: beta.'
  c.option '--config-file [filename]', String, 'path to yaml file.'
  c.option '--application-version [version]', String, 'optional application version.'
  c.option '--cookbooks-version [version]', String, 'optional cookbooks version.' 
  c.option '--start', 'Start all instances after creation. Default: false.'
  c.action do |args, options|
    options.default \
      :environment => 'beta',
      :start => false

    ops = connect(options.verbose)
    input = open_input(options.yes)
    
    config = {
      :environment => options.environment,
      :cookbooks_version => options.cookbooks_version,
      :application_version => options.application_version
    }

    configuration = load_config(options.config_file, config)
    bootstrap(ops, configuration, options.start, input)
  end
end

command :test do |c|
  c.syntax = 'opscommander test [options]'
  c.description = 'Tests a stack configuration file with Test Kitchen. Sequentially loads all layers and starts one instance with \'kitchen\'.'
  c.option '--environment [name]', String, 'environment name (alpha, beta, live, ...). Default: beta.'
  c.option '--config-file [filename]', String, 'path to yaml file.'
  c.option '--application-version [version]', String, 'optional application version.'
  c.option '--cookbooks-version [version]', String, 'optional cookbooks version.' 
  c.option '--filter filter', 'Filter layers by name.'
  c.action do |args, options|
    options.default \
      :environment => 'beta'

    input = open_input(options.yes)
    config = {
      :environment => options.environment,
      :cookbooks_version => options.cookbooks_version,
      :application_version => options.application_version
    }
    configuration = load_config(options.config_file, config)
    vagrant_test(configuration)
  end
end

command :delete do |c|
  c.syntax = 'opscommander delete [options]'
  c.description = 'Deletes a stack.'
  c.option '--stack-name [name]', String, 'stack name.'
  c.action do |args, options|
    ops = connect(options.verbose)
    input = open_input(options.yes)
    delete(ops, options.stack_name, input)
  end
end

#command :create_app do |c|
  #c.syntax 'opscommander create_app [options] <name> [environment variables]'
  #c.summary ''
  #c.description 'Creates an application, overwriting any old one with the same name.'
#end

command :bluegreen do |c|
  c.syntax = 'opscommander blue-green [options]'
  c.description = 'Deploys a new version by starting new blue layers and switching elbs afterwards.'
  c.option '--config-file [filename]', String, 'path to yaml file.'
  c.option '--environment [name]', String, 'environment name (alpha, beta, live, ...). Default: beta.'
  c.option '--application-version [version]', String, 'optional application version.'
  c.option '--cookbooks-version [version]', String, 'optional cookbooks version.' 
  c.action do |args, options|
    options.default \
      :environment => 'beta'

    ops = connect(options.verbose)
    input = open_input(options.yes)
    config = {
      :environment => options.environment,
      :cookbooks_version => options.cookbooks_version,
      :application_version => options.application_version
    }
    configuration = load_config(options.config_file, config)
    bluegreen(ops, configuration, input)
  end
end

# TODO: :inplace command for (re-)deployment with downtime

command :whoami do |c|
  c.syntax = 'opscommander whoami'
  c.description = 'Reads the current amazon credentials and displays the current user.'
  c.action do |args, options|
    ops = connect(options.verbose)
    ops.whoami
  end
end

def connect(verbose)
  ops = OpsWorks.new
  ops.verbose = verbose
  return ops
end

def open_input(yes)
  Console.new(yes)
end

def load_config(yaml_file, config)
  config = YAML.load(parse_erb(yaml_file, config))
end

def parse_erb(erb_file, config)
  # read config json file
  file = File.open(erb_file, "rb")
  renderer = ErbHash.new(config)
  renderer.render(file.read)
end

