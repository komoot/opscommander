#!/usr/bin/env ruby

require 'rubygems'
require 'commander/import'
require 'pp'

require "aws/aws_configuration.rb"
require 'aws/opsworks.rb'
require 'commands/bootstrap.rb'
require 'commands/bluegreen.rb'
require 'commands/rename.rb'
require 'commands/delete.rb'
require 'commands/create_app.rb'
require 'commands/deploy_app.rb'

require 'config.rb'

# force flush of stdout. for jenkins. slower.
STDOUT.sync = true

program :version, '1.0.8'
program :description, 'Manages bootstrapping, configuration and deployment of OpsWorks stacks'
global_option '--yes'
global_option '--verbose'

command :bootstrap do |c|
  c.syntax = 'opscommander bootstrap [options]'
  c.description = 'Bootstraps a stack from config. Existing Instances/Layers can be deleted.'
  c.option '--config-file [filename]', String, 'path to stack definition yaml file.'
  c.option '--variables [key=value,key=value,...]', String, 'optional template variables for the yaml file.'
  c.option '--start', 'Start all instances after creation. Default: false.'
  c.option '--create-elbs', 'Create elastic loadbalancers if necessary. Default: false.'
  c.action do |args, options|
    if not options.config_file
      report_error 'Please specify the path to a stack definition yaml file.'
    end

    options.default \
      :start => false,
      :create_elbs => false

    ops = connect(options.verbose)
    input = open_input(options.yes)
    
    configuration = OpsWorksConfig.load(options.config_file, parse_variables(options.variables, options.verbose))

    bootstrap(ops, configuration, input, {:start_instances => options.start, :create_elbs => options.create_elbs, :attach_elb => true, :enable_auto_scaling => true})

  end
end

command :delete do |c|
  c.syntax = 'opscommander delete <stack name>'
  c.description = 'Deletes a stack.'
  c.action do |args, options|
    ops = connect(options.verbose)
    input = open_input(options.yes)

    if args.length == 0
      report_error 'Please enter a stack name.'
    end

    delete(ops, args[0], input)
  end
end

command :rename do |c|
  c.syntax = 'opscommander rename <old stack name> <new stack name>'
  c.description = 'Renames a stack. Updates EC2 instance tags to reflect new name.'
  c.action do |args, options|
    old_name = args[0]
    new_name = args[1]

    if not old_name or not new_name
      report_error "Not enough arguments."
    end

    ops = connect(options.verbose)
    rename(ops, old_name, new_name)
  end
end

command :create_app do |c|
  c.syntax = 'opscommander create_app [options] <name>'
  c.description = 'Creates an application, overwriting any old one with the same name. The app must be defined in the stack definition yaml file.'
  c.option '--config-file [filename]', String, 'path to stack definition yaml file.'
  c.option '--variables [key=value,key=value,...]', String, 'optional template variables for the yaml file.'
  c.action do |args, options|

    if not options.config_file
      report_error 'Please specify the path to a stack definition yaml file.'
    end

    if args.length == 0
      report_error 'Please enter an app name.'
    end

    app_name = args[0]

    ops = connect(options.verbose)
    configuration = OpsWorksConfig.load(options.config_file, parse_variables(options.variables, options.verbose))

    if not configuration['apps']
      report_error "No apps defined in the stack definition yaml."
    end

    if not configuration['apps'].has_key?(app_name)
      report_error "The app '#{app_name}' is not defined in the stack definition yaml."
    end

    create_app(ops, configuration, app_name)
  end
end

command :deploy_app do |c|
  c.syntax = 'opscommander deploy_app [options] <name>'
  c.description = 'Deploys an application to all running instances. The app must be defined in the stack definition yaml file and it must exist in OpsWorks (see create_app).'
  c.option '--config-file [filename]', String, 'path to stack definition yaml file.'
  c.option '--variables [key=value,key=value,...]', String, 'optional template variables for the yaml file.'
  c.action do |args, options|
    if not options.config_file
      report_error 'Please specify the path to a stack definition yaml file.'
    end

    if args.length == 0
      report_error 'Please enter an app name.'
    end

    app_name = args[0]

    ops = connect(options.verbose)
    configuration = OpsWorksConfig.load(options.config_file, parse_variables(options.variables, options.verbose))

    if not configuration['apps']
      report_error "No apps defined in the stack definition yaml."
    end

    if not configuration['apps'].has_key?(app_name)
      report_error "The app '#{app_name}' is not defined in the stack definition yaml."
    end

    deploy_app(ops, configuration, app_name)
  end
end

command :bluegreen do |c|
  c.syntax = 'opscommander bluegreen [options]'
  c.description = 'Deploys a new version by starting a new stack and switching ELBs once it is online. Deletes the current live stack when done.'
  c.option '--config-file [filename]', String, 'path to stack definition yaml file.'
  c.option '--variables [key=value,key=value,...]', String, 'optional template variables for the yaml file.'
  c.option '--mixed-state-duration [SECONDS]', Integer, 'How long to let servers run in a mixed state, in seconds. Default = 0.'
  c.action do |args, options|
    if not options.config_file
      report_error 'Please specify the path to a stack definition yaml file.'
    end
    
    options.default \
      :mixed_state_duration => 0

    conn = connect(options.verbose)
    input = open_input(options.yes)
    configuration = OpsWorksConfig.load(options.config_file, parse_variables(options.variables, options.verbose))
    bluegreen(OpsWorks.new(conn), configuration, input, options.mixed_state_duration)
  end
end

command :cat do |c|
  c.syntax = 'opscommander cat [options]'
  c.description = 'Outputs the parsed yaml config file'
  c.option '--config-file [filename]', String, 'path to stack definition yaml file.'
  c.option '--variables [key=value,key=value,...]', String, 'optional template variables for the yaml.erb file.'
  c.action do |args, options|
    if not options.config_file
      report_error 'Please specify the path to a stack definition yaml file.'
    end

    puts OpsWorksConfig.parse(options.config_file, parse_variables(options.variables))
  end
end

command :whoami do |c|
  c.syntax = 'opscommander whoami'
  c.description = 'Reads the current amazon credentials and displays the current user.'
  c.action do |args, options|
    ops = connect(options.verbose)
    ops.whoami
  end
end

def connect(verbose)
  aws_connection = AwsConfiguration.new
  aws_connection.verbose = verbose
  return aws_connection
end

def report_error(message)
  say message
  exit 1
end

def open_input(yes)
  Console.new(yes)
end

def parse_variables(key_value_list, verbose=false)
  config = {}
  if key_value_list
    key_value_list.split(',').each do |kv|
      parts = kv.strip.split('=')
      config[parts[0]] = parts[1]
      puts parts[0] + "='" + parts[1] + "'" if verbose
    end
  end
  return config
end

